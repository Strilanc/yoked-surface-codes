#!/usr/bin/env python3

import argparse
import os
import pathlib
import sys

src_path = pathlib.Path(__file__).parent.parent / 'src'
assert src_path.exists()
sys.path.append(str(src_path))

from yoked.gap._gap_collect_paths import collect_circuit_paths


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--circuits', nargs='+', type=str, required=True)
    parser.add_argument('--max_shots', type=int, required=True)
    parser.add_argument('--out', type=str, default=None)
    parser.add_argument('--existing_data', nargs='+', type=str, default=[])
    parser.add_argument('--save_resume_filepath', type=str, default=None)
    parser.add_argument('--processes', type=str, required=True)
    parser.add_argument('--flush_period', type=float, default=30)
    args = parser.parse_args()

    num_workers = os.cpu_count() if args.processes == 'auto' else int(args.processes)
    collect_circuit_paths(
        max_shots=args.max_shots,
        circuit_paths=args.circuits,
        existing_data=args.existing_data,
        out_path=args.out,
        save_resume_filepath=args.save_resume_filepath,
        processes=num_workers,
        flush_period=args.flush_period,
    )


if __name__ == '__main__':
    main()
